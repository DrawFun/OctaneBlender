/*
 * Copyright 2011, Blender Foundation.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

#include "nodes.h"
#include "graph.h"
#include "scene.h"
#include "shader.h"

OCT_NAMESPACE_BEGIN

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SHADER NODE
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Shader::Shader() {
	name        = "";
	pass_id     = 0;
	graph       = 0;
	need_update = true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Shader::~Shader() {
	delete graph;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Assign current graph
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Shader::set_graph(ShaderGraph *graph_) {
	if(graph) delete graph;
	graph = graph_;
} //set_graph()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Shader::tag_update(Scene *scene) {
	need_update = true;
	scene->shader_manager->need_update = true;
} //tag_update()



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SHADER MANAGER
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ShaderManager::ShaderManager() : need_update(true) {
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ShaderManager *ShaderManager::create(Scene *scene) {
	ShaderManager *manager = new ShaderManager();
	add_default(scene);

	return manager;
} //create()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ShaderManager::server_update(RenderServer *server, Scene *scene, Progress& progress) {
	if(!need_update) return;

    size_t cnt = scene->shaders.size();
	if(!cnt) return;

	for(size_t i = 0; i < cnt; ++i) {
        Shader *shader = scene->shaders[i];
        if(!shader->need_update) continue;
        if(!shader->graph) continue;

        for(list<ShaderNode*>::iterator it = shader->graph->nodes.begin(); it != shader->graph->nodes.end(); ++it) {
            ShaderNode *node = *it;
            if(node->input("Surface")) continue;

            node->load_to_server(server);
        }
        shader->need_update = false;
	}
	need_update = false;
} //server_update()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Add default shaders to scene, to use as default for things that don't have any shader assigned explicitly
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ShaderManager::add_default(Scene *scene) {
	// Add default surface material
	ShaderGraph *graph = new ShaderGraph();
    graph->add(new OctaneDiffuseMaterial());

	Shader *shader  = new Shader();
	shader->name    = "default_surface";
	shader->graph   = graph;
	scene->shaders.push_back(shader);
	scene->default_surface = scene->shaders.size() - 1;
} //add_default()

OCT_NAMESPACE_END

